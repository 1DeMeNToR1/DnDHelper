# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\dimon\Desktop\python\DnD_Helper_code\ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.setEnabled(True)
        MainWindow.resize(1100, 900)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1100, 900))
        MainWindow.setMaximumSize(QtCore.QSize(1100, 900))
        MainWindow.setSizeIncrement(QtCore.QSize(0, 0))
        MainWindow.setBaseSize(QtCore.QSize(1100, 900))
        font = QtGui.QFont()
        font.setFamily("Source Code Pro Semibold")
        font.setStrikeOut(False)
        MainWindow.setFont(font)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("C:\\Users\\dimon\\Desktop\\python\\DnD_Helper_code\\../../../../.designer/backup/old/icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color: url(1.jpg)")
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        MainWindow.setDockOptions(QtWidgets.QMainWindow.AllowTabbedDocks|QtWidgets.QMainWindow.AnimatedDocks)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.characters_tab = QtWidgets.QTabWidget(self.centralwidget)
        self.characters_tab.setGeometry(QtCore.QRect(0, 0, 1101, 881))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.characters_tab.sizePolicy().hasHeightForWidth())
        self.characters_tab.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.characters_tab.setFont(font)
        self.characters_tab.setAcceptDrops(False)
        self.characters_tab.setAutoFillBackground(True)
        self.characters_tab.setStyleSheet("")
        self.characters_tab.setInputMethodHints(QtCore.Qt.ImhNone)
        self.characters_tab.setTabPosition(QtWidgets.QTabWidget.North)
        self.characters_tab.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.characters_tab.setElideMode(QtCore.Qt.ElideNone)
        self.characters_tab.setDocumentMode(False)
        self.characters_tab.setTabsClosable(True)
        self.characters_tab.setMovable(True)
        self.characters_tab.setTabBarAutoHide(False)
        self.characters_tab.setObjectName("characters_tab")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 1100, 21))
        font = QtGui.QFont()
        font.setFamily("Source Code Pro Semibold")
        font.setStrikeOut(False)
        self.menuBar.setFont(font)
        self.menuBar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.menuBar.setAutoFillBackground(True)
        self.menuBar.setDefaultUp(False)
        self.menuBar.setObjectName("menuBar")
        self.character_menu = QtWidgets.QMenu(self.menuBar)
        self.character_menu.setObjectName("character_menu")
        self.book_menu = QtWidgets.QMenu(self.menuBar)
        self.book_menu.setObjectName("book_menu")
        self.instruments_menu = QtWidgets.QMenu(self.menuBar)
        self.instruments_menu.setObjectName("instruments_menu")
        self.instr_character = QtWidgets.QMenu(self.instruments_menu)
        self.instr_character.setObjectName("instr_character")
        self.name_generator = QtWidgets.QMenu(self.instr_character)
        self.name_generator.setObjectName("name_generator")
        self.bandit_name_generator = QtWidgets.QMenu(self.instr_character)
        self.bandit_name_generator.setObjectName("bandit_name_generator")
        self.harakter_generator = QtWidgets.QMenu(self.instr_character)
        self.harakter_generator.setObjectName("harakter_generator")
        self.country_name_generator = QtWidgets.QMenu(self.instr_character)
        self.country_name_generator.setObjectName("country_name_generator")
        self.make_location = QtWidgets.QMenu(self.instruments_menu)
        self.make_location.setObjectName("make_location")
        self.home_generator = QtWidgets.QMenu(self.make_location)
        self.home_generator.setObjectName("home_generator")
        self.city_generator = QtWidgets.QMenu(self.make_location)
        self.city_generator.setObjectName("city_generator")
        self.usefull_menu = QtWidgets.QMenu(self.menuBar)
        self.usefull_menu.setObjectName("usefull_menu")
        self.bestiary = QtWidgets.QMenu(self.usefull_menu)
        self.bestiary.setObjectName("bestiary")
        self.items = QtWidgets.QMenu(self.usefull_menu)
        self.items.setObjectName("items")
        self.magic_items = QtWidgets.QMenu(self.items)
        self.magic_items.setObjectName("magic_items")
        self.normal_items = QtWidgets.QMenu(self.items)
        self.normal_items.setObjectName("normal_items")
        self.magic = QtWidgets.QMenu(self.usefull_menu)
        self.magic.setObjectName("magic")
        self.cubes = QtWidgets.QMenu(self.menuBar)
        self.cubes.setObjectName("cubes")
        self.configs = QtWidgets.QMenu(self.menuBar)
        self.configs.setObjectName("configs")
        self.vk_group = QtWidgets.QMenu(self.menuBar)
        self.vk_group.setObjectName("vk_group")
        self.help = QtWidgets.QMenu(self.menuBar)
        self.help.setTearOffEnabled(False)
        self.help.setObjectName("help")
        MainWindow.setMenuBar(self.menuBar)
        self.add_character = QtWidgets.QAction(MainWindow)
        self.add_character.setObjectName("add_character")
        self.load_character = QtWidgets.QAction(MainWindow)
        self.load_character.setObjectName("load_character")
        self.save_character = QtWidgets.QAction(MainWindow)
        self.save_character.setObjectName("save_character")
        self.master_book = QtWidgets.QAction(MainWindow)
        self.master_book.setObjectName("master_book")
        self.study_book = QtWidgets.QAction(MainWindow)
        self.study_book.setObjectName("study_book")
        self.sounds = QtWidgets.QAction(MainWindow)
        self.sounds.setObjectName("sounds")
        self.actionrpgtinker_com_country_name_generator = QtWidgets.QAction(MainWindow)
        self.actionrpgtinker_com_country_name_generator.setObjectName("actionrpgtinker_com_country_name_generator")
        self.actionAutoNAME_AutoREALM_name_generator = QtWidgets.QAction(MainWindow)
        self.actionAutoNAME_AutoREALM_name_generator.setObjectName("actionAutoNAME_AutoREALM_name_generator")
        self.actiontentaculus_ru_name_generator = QtWidgets.QAction(MainWindow)
        self.actiontentaculus_ru_name_generator.setObjectName("actiontentaculus_ru_name_generator")
        self.actionstormtower_ru_bandit_name_generator = QtWidgets.QAction(MainWindow)
        self.actionstormtower_ru_bandit_name_generator.setObjectName("actionstormtower_ru_bandit_name_generator")
        self.actionrandomall_ru_harakter_generator = QtWidgets.QAction(MainWindow)
        self.actionrandomall_ru_harakter_generator.setObjectName("actionrandomall_ru_harakter_generator")
        self.actionrandomall_ru_county_name_generator = QtWidgets.QAction(MainWindow)
        self.actionrandomall_ru_county_name_generator.setObjectName("actionrandomall_ru_county_name_generator")
        self.actionstormtower_ru_home_generator = QtWidgets.QAction(MainWindow)
        self.actionstormtower_ru_home_generator.setObjectName("actionstormtower_ru_home_generator")
        self.actionCampaign_Cartographer_3_CC3_city_generator = QtWidgets.QAction(MainWindow)
        self.actionCampaign_Cartographer_3_CC3_city_generator.setObjectName("actionCampaign_Cartographer_3_CC3_city_generator")
        self.actionAutoREALM_city_generator = QtWidgets.QAction(MainWindow)
        self.actionAutoREALM_city_generator.setObjectName("actionAutoREALM_city_generator")
        self.actionpyromancers_com_city_generator = QtWidgets.QAction(MainWindow)
        self.actionpyromancers_com_city_generator.setObjectName("actionpyromancers_com_city_generator")
        self.actionwatabou_itch_io_city_generator = QtWidgets.QAction(MainWindow)
        self.actionwatabou_itch_io_city_generator.setObjectName("actionwatabou_itch_io_city_generator")
        self.actiondungeon_su_bestiary = QtWidgets.QAction(MainWindow)
        self.actiondungeon_su_bestiary.setObjectName("actiondungeon_su_bestiary")
        self.actiontentaculus_ru_bestiary = QtWidgets.QAction(MainWindow)
        self.actiontentaculus_ru_bestiary.setObjectName("actiontentaculus_ru_bestiary")
        self.actiondungeon_su_magic_items = QtWidgets.QAction(MainWindow)
        self.actiondungeon_su_magic_items.setObjectName("actiondungeon_su_magic_items")
        self.actiontentaculus_ru_magic_items = QtWidgets.QAction(MainWindow)
        self.actiontentaculus_ru_magic_items.setObjectName("actiontentaculus_ru_magic_items")
        self.actiondungeon_su_normal_items = QtWidgets.QAction(MainWindow)
        self.actiondungeon_su_normal_items.setObjectName("actiondungeon_su_normal_items")
        self.actiondnd5_club_normal_items = QtWidgets.QAction(MainWindow)
        self.actiondnd5_club_normal_items.setObjectName("actiondnd5_club_normal_items")
        self.actiondungeon_su_magic = QtWidgets.QAction(MainWindow)
        self.actiondungeon_su_magic.setObjectName("actiondungeon_su_magic")
        self.actiontentaculus_ru_magic = QtWidgets.QAction(MainWindow)
        self.actiontentaculus_ru_magic.setObjectName("actiontentaculus_ru_magic")
        self.action1 = QtWidgets.QAction(MainWindow)
        self.action1.setObjectName("action1")
        self.character_menu.addAction(self.add_character)
        self.character_menu.addAction(self.load_character)
        self.character_menu.addAction(self.save_character)
        self.book_menu.addAction(self.master_book)
        self.book_menu.addAction(self.study_book)
        self.name_generator.addAction(self.actionAutoNAME_AutoREALM_name_generator)
        self.name_generator.addAction(self.actiontentaculus_ru_name_generator)
        self.bandit_name_generator.addAction(self.actionstormtower_ru_bandit_name_generator)
        self.harakter_generator.addAction(self.actionrandomall_ru_harakter_generator)
        self.country_name_generator.addAction(self.actionrandomall_ru_county_name_generator)
        self.instr_character.addAction(self.name_generator.menuAction())
        self.instr_character.addAction(self.bandit_name_generator.menuAction())
        self.instr_character.addAction(self.harakter_generator.menuAction())
        self.instr_character.addAction(self.country_name_generator.menuAction())
        self.instr_character.addAction(self.actionrpgtinker_com_country_name_generator)
        self.home_generator.addAction(self.actionstormtower_ru_home_generator)
        self.city_generator.addAction(self.actionwatabou_itch_io_city_generator)
        self.make_location.addAction(self.home_generator.menuAction())
        self.make_location.addAction(self.city_generator.menuAction())
        self.make_location.addAction(self.actionCampaign_Cartographer_3_CC3_city_generator)
        self.make_location.addAction(self.actionAutoREALM_city_generator)
        self.make_location.addAction(self.actionpyromancers_com_city_generator)
        self.instruments_menu.addAction(self.instr_character.menuAction())
        self.instruments_menu.addAction(self.make_location.menuAction())
        self.instruments_menu.addAction(self.sounds)
        self.bestiary.addAction(self.actiondungeon_su_bestiary)
        self.bestiary.addAction(self.actiontentaculus_ru_bestiary)
        self.magic_items.addAction(self.actiondungeon_su_magic_items)
        self.magic_items.addAction(self.actiontentaculus_ru_magic_items)
        self.normal_items.addAction(self.actiondungeon_su_normal_items)
        self.normal_items.addAction(self.actiondnd5_club_normal_items)
        self.items.addAction(self.magic_items.menuAction())
        self.items.addAction(self.normal_items.menuAction())
        self.magic.addAction(self.actiondungeon_su_magic)
        self.magic.addAction(self.actiontentaculus_ru_magic)
        self.usefull_menu.addAction(self.bestiary.menuAction())
        self.usefull_menu.addAction(self.items.menuAction())
        self.usefull_menu.addAction(self.magic.menuAction())
        self.cubes.addAction(self.action1)
        self.menuBar.addAction(self.character_menu.menuAction())
        self.menuBar.addAction(self.book_menu.menuAction())
        self.menuBar.addAction(self.instruments_menu.menuAction())
        self.menuBar.addAction(self.usefull_menu.menuAction())
        self.menuBar.addAction(self.cubes.menuAction())
        self.menuBar.addAction(self.configs.menuAction())
        self.menuBar.addAction(self.vk_group.menuAction())
        self.menuBar.addAction(self.help.menuAction())

        self.retranslateUi(MainWindow)
        self.characters_tab.setCurrentIndex(-1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "D&D Helper(alphatest 0.4)"))
        self.character_menu.setTitle(_translate("MainWindow", "Персонаж"))
        self.book_menu.setTitle(_translate("MainWindow", "Книга"))
        self.instruments_menu.setTitle(_translate("MainWindow", "Инструменты"))
        self.instr_character.setTitle(_translate("MainWindow", "Создание персонажа/npc"))
        self.name_generator.setTitle(_translate("MainWindow", "Генератор имен"))
        self.bandit_name_generator.setTitle(_translate("MainWindow", "Генератор имен бандитов"))
        self.harakter_generator.setTitle(_translate("MainWindow", "Генератор характера"))
        self.country_name_generator.setTitle(_translate("MainWindow", "Генератор названия станы"))
        self.make_location.setTitle(_translate("MainWindow", "Создание локаций"))
        self.home_generator.setTitle(_translate("MainWindow", "Генератор Таверн"))
        self.city_generator.setTitle(_translate("MainWindow", "Генератор карты города"))
        self.usefull_menu.setTitle(_translate("MainWindow", "Бестиарий/Предметы/Заклинания"))
        self.bestiary.setTitle(_translate("MainWindow", "Бестиарий"))
        self.items.setTitle(_translate("MainWindow", "Предметы"))
        self.magic_items.setTitle(_translate("MainWindow", "Маг. Предметы"))
        self.normal_items.setTitle(_translate("MainWindow", "Обычное оружие"))
        self.magic.setTitle(_translate("MainWindow", "Заклинания"))
        self.cubes.setTitle(_translate("MainWindow", "Кубики"))
        self.configs.setTitle(_translate("MainWindow", "Настройки"))
        self.vk_group.setTitle(_translate("MainWindow", "Вк группа"))
        self.help.setTitle(_translate("MainWindow", "Помощь"))
        self.add_character.setText(_translate("MainWindow", "Добавить"))
        self.add_character.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.load_character.setText(_translate("MainWindow", "Загрузить"))
        self.load_character.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.save_character.setText(_translate("MainWindow", "Сохранить всех"))
        self.save_character.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.master_book.setText(_translate("MainWindow", "Книга Мастера(offline)"))
        self.master_book.setShortcut(_translate("MainWindow", "Ctrl+M"))
        self.study_book.setText(_translate("MainWindow", "Книга Игрока(Offline)"))
        self.study_book.setShortcut(_translate("MainWindow", "Ctrl+P"))
        self.sounds.setText(_translate("MainWindow", "Звуковое сопровождение"))
        self.actionrpgtinker_com_country_name_generator.setText(_translate("MainWindow", "rpgtinker.com"))
        self.actionAutoNAME_AutoREALM_name_generator.setText(_translate("MainWindow", "AutoNAME(AutoREALM)"))
        self.actiontentaculus_ru_name_generator.setText(_translate("MainWindow", "tentaculus.ru"))
        self.actionstormtower_ru_bandit_name_generator.setText(_translate("MainWindow", "stormtower.ru"))
        self.actionrandomall_ru_harakter_generator.setText(_translate("MainWindow", "randomall.ru"))
        self.actionrandomall_ru_county_name_generator.setText(_translate("MainWindow", "randomall.ru"))
        self.actionstormtower_ru_home_generator.setText(_translate("MainWindow", "stormtower.ru(Описание)"))
        self.actionCampaign_Cartographer_3_CC3_city_generator.setText(_translate("MainWindow", "Campaign Cartographer 3(CC3)"))
        self.actionAutoREALM_city_generator.setText(_translate("MainWindow", "AutoREALM"))
        self.actionpyromancers_com_city_generator.setText(_translate("MainWindow", "pyromancers.com"))
        self.actionwatabou_itch_io_city_generator.setText(_translate("MainWindow", "watabou.itch.io"))
        self.actiondungeon_su_bestiary.setText(_translate("MainWindow", "dungeon.su"))
        self.actiontentaculus_ru_bestiary.setText(_translate("MainWindow", "tentaculus.ru"))
        self.actiondungeon_su_magic_items.setText(_translate("MainWindow", "dungeon.su"))
        self.actiontentaculus_ru_magic_items.setText(_translate("MainWindow", "tentaculus.ru"))
        self.actiondungeon_su_normal_items.setText(_translate("MainWindow", "dungeon.su"))
        self.actiondnd5_club_normal_items.setText(_translate("MainWindow", "dnd5.club"))
        self.actiondungeon_su_magic.setText(_translate("MainWindow", "dungeon.su"))
        self.actiontentaculus_ru_magic.setText(_translate("MainWindow", "tentaculus.ru"))
        self.action1.setText(_translate("MainWindow", "1"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
